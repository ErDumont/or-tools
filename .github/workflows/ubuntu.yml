name: Ubuntu

on:
  push:
    branches:
      - main
      - feature/*

jobs:

  build-ubuntu:
    runs-on: ubuntu-latest
    env:
      Sirius_Ref: antares_integration
      XPRS_Path: ${{ github.workspace }}/xpressmp813
      XPRESS: ${{ github.workspace }}/xpressmp813/bin
      XPRS_LIB_Path: ${{ github.workspace }}/xpressmp813/lib
    strategy:
      matrix:
        xprs: [ON, OFF]
        sirius: [ON, OFF]
        shared: [ON, OFF]

        exclude:
          - xprs: OFF
            sirius: OFF

    name: build ubuntu shared=${{ matrix.shared }} sirius=${{ matrix.sirius }} xprs=${{ matrix.xprs }}

    steps:
      - name: set name variables
        id: names
        shell: bash
        run: |
          SHARED=${{ matrix.shared }}
          [ $SHARED == "ON" ] && WITH_SHARED="_shared" || WITH_SHARED="_static"
          XPRS=${{ matrix.xprs }}
          [ $XPRS == "ON" ] && WITH_XPRS="_xprs" || WITH_XPRS=""
          SIRIUS=${{ matrix.sirius }}
          [ $SIRIUS == "ON" ] && WITH_SIRIUS="_sirius" || WITH_SIRIUS=""
          APPENDIX="${WITH_SHARED}${WITH_SIRIUS}${WITH_XPRS}"
          echo "::set-output name=appendix::$APPENDIX"
          LIB_NAME="ortools_install${APPENDIX}"
          echo "::set-output name=lib-name::$LIB_NAME"

      - name: Checkout or-tools
        uses: actions/checkout@v2

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1

      - name: setup envoronment
        id: setup
        uses: ./.github/workflows/setup-env-ubuntu
        with:
          sirius-ref: ${{ env.Sirius_Ref }}

      - name: Upload sirius install
        uses: actions/upload-artifact@v2
        with:
          name: sirius_install
          path: ${{ steps.setup.outputs.sirius-install-path }}

      - name: Checkout xpressmp813
        uses: actions/checkout@v2
        with:
          repository: rte-france/xpress-mp
          path: ${{ env.XPRS_Path }}
          ref: master
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Configure or-tools
        run: |
          cmake -S. \
                -Bbuild \
                -DCMAKE_C_COMPILER_LAUNCHER=ccache \
                -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX="build/install" \
                -DBUILD_SHARED_LIBS=${{ matrix.shared }}  \
                -DBUILD_DEPS=ON \
                -DUSE_SIRIUS=${{ matrix.sirius }} \
                -Dsirius_solver_DIR="${{ steps.setup.outputs.sirius-install-path }}/cmake" \
                -DUSE_XPRESS=${{ matrix.xprs }} \
                -DXPRESS_ROOT="${{ env.XPRS_Path }}" \
                -DBUILD_PYTHON=${{ matrix.shared }} \
                -DBUILD_JAVA=${{ matrix.shared }} \
                -DBUILD_DOTNET=${{ matrix.shared }}
      - name: Build
        run: |
          cmake --build build \
                --target all \
                install \
                -j4
      - name: Prepare ortools install
        working-directory: ${{ github.workspace }}/build/install
        run: find bin -type f ! \( -name 'protoc*' -o -name 'scip' -o -name 'fz' \) -delete

      - name: Upload artifact ortools install
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.names.outputs.lib-name }}
          path: ./build/install

      - name: Publish asset  file upload
        if:  github.event_name == 'release' && github.event.action == 'created'
        uses: actions/upload-release-asset@v1.0.2
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./build/install
          asset_name: ${{ steps.names.outputs.lib-name }}

      - name: set ld_library_path
        run: |
          LD_PATH="${{ steps.setup.outputs.sirius-install-path }}/lib/:${{ env.XPRS_LIB_Path }}/"
          echo "LD_LIBRARY_PATH=$LD_PATH" >> $GITHUB_ENV

      - name: Build & run CMake example project
        working-directory: ./examples/cmake/linear_programming/
        run: |
          cmake -Bbuild -S. \
                -DORTOOLS_INSTALL="${{ github.workspace }}/build/install" \
                -DXPRESS_ROOT="${{ env.XPRS_Path }}" \
                -Dsirius_solver_DIR="${{ steps.setup.outputs.sirius-install-path }}/cmake"
          cmake --build build
          ./build/linear_programming

      - name: Upload ortools wheel
        if: ${{ matrix.shared == 'ON' }}
        uses: actions/upload-artifact@v2
        with:
          name: ortools_wheel${{ steps.names.outputs.appendix }}
          path: './build/python/dist/*.whl'
      - name: Upload ortools jar
        if: ${{ matrix.shared == 'ON' }}
        uses: actions/upload-artifact@v2
        with:
          name: ortools_jar${{ steps.names.outputs.appendix }}
          path: ./build/java/ortools-*/target/*.jar
      - name: Upload ortools dotnet
        if: ${{ matrix.shared == 'ON' }}
        uses: actions/upload-artifact@v2
        with:
          name: ortools_dotnet${{ steps.names.outputs.appendix }}
          path: |
            ./build/dotnet/packages/Google.OrTools.[0-9]*.[0-9]*.[0-9]*.nupkg
            ./build/dotnet/packages/Google.OrTools.runtime.*.[0-9]*.[0-9]*.[0-9]*.nupkg

      - name: Publish ortools wheel
        if:  ${{ github.event_name == 'release' && github.event.action == 'created' && matrix.shared == 'ON' }}
        uses: actions/upload-release-asset@v1.0.2
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: './build/python/dist/*.whl'
          asset_name: ortools_wheel${{ steps.names.outputs.appendix }}

      - name: Publish ortools jar
        if:  ${{ github.event_name == 'release' && github.event.action == 'created' && matrix.shared == 'ON' }}
        uses: actions/upload-release-asset@v1.0.2
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./build/java/ortools-*/target/*.jar
          asset_name: ortools_jar${{ steps.names.outputs.appendix }}

