name: Windows-Ubuntu

on:
  push:
    branches:
      - main
      - feature/*
  release:
    types: [ created ]

env:
  GITHUB_TOKEN: ${{ github.token }}

jobs:

  build:
    name: ${{ matrix.os }} shared=${{ matrix.shared }} sirius=${{ matrix.sirius }} xprs=${{ matrix.xprs }}
    runs-on: ${{ matrix.os }}
    env:
      Sirius_Ref: antares_integration
      XPRS_Path: ${{ github.workspace }}/xpressmp813
      XPRESS: ${{ github.workspace }}/xpressmp813/bin
      XPRS_LIB_Path: ${{ github.workspace }}/xpressmp813/lib
    strategy:
      matrix:
        os: [windows-2019, ubuntu-20.04]
        xprs: [ON, OFF]
        sirius: [ON, OFF]
        shared: [ON, OFF]
        extras: [ON, OFF]

        exclude:
          - xprs: OFF
            sirius: OFF
          - os: windows-2019
            shared: ON
          - os: windows-2019
            shared: OFF
            extras: OFF
          - os: ubuntu-20.04
            shared: OFF
            extras: ON
          - os: ubuntu-20.04
            shared: ON
            extras: OFF

    steps:
      - name: set name variables
        id: names
        shell: bash
        run: |
          REF=${GITHUB_REF#refs/*/}
          REF_WO_SLASHES=${REF//\//-}
          EVENT=${{ github.event_name }}
          [ EVENT == 'release' ] && WITH_VERSION="_${REF_WO_SLASHES}" || WITH_VERSION=""
          SHARED=${{ matrix.shared }}
          [ $SHARED == "ON" ] && WITH_SHARED="_shared" || WITH_SHARED="_static"
          XPRS=${{ matrix.xprs }}
          [ $XPRS == "ON" ] && WITH_XPRS="_xprs" || WITH_XPRS=""
          SIRIUS=${{ matrix.sirius }}
          [ $SIRIUS == "ON" ] && WITH_SIRIUS="_sirius" || WITH_SIRIUS=""
          OS="_${{ matrix.os }}"
          APPENDIX="${OS}${WITH_SHARED}${WITH_SIRIUS}${WITH_XPRS}${WITH_VERSION}"
          echo "::set-output name=appendix::$APPENDIX"
          LIB_NAME="ortools_install${APPENDIX}"
          echo "::set-output name=lib-name::$LIB_NAME"


      - name: Get release
        if: github.event_name == 'release' && github.event.action == 'created'
        id: get_release
        uses:
          bruceadams/get-release@v1.2.3

      - name: install zip for windows
        if: ${{ matrix.os == 'windows-2019'}}
        shell: cmd
        run: |
          choco install wget zip unzip --no-progress

      - name: Install SWIG 4.0.2
        if: ${{ matrix.os == 'windows-2019'}}
        run: |
          (New-Object System.Net.WebClient).DownloadFile("http://prdownloads.sourceforge.net/swig/swigwin-4.0.2.zip","swigwin-4.0.2.zip");
          Expand-Archive .\swigwin-4.0.2.zip .;
          echo "$((Get-Item .).FullName)/swigwin-4.0.2" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Checkout or-tools
        uses: actions/checkout@v2

      - name: ccache
        if: ${{ matrix.os != 'windows-2019'}}
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: ${{ matrix.os }}-${{ matrix.shared }}-${{ matrix.sirius }}-${{ matrix.xprs }}

      - name: setup envoronment
        id: setup
        uses: ./.github/workflows/setup-env-ubuntu
        with:
          sirius-ref: ${{ env.Sirius_Ref }}

      - name: Upload sirius install
        if: ${{ matrix.xprs == 'ON' && matrix.sirius == 'ON' && matrix.shared == 'ON' }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}_${{ steps.setup.outputs.sirius-archive-name }}
          path: ${{ steps.setup.outputs.sirius-archive-path }}
      - name: Publish sirius install
        if:  ${{ github.event_name == 'release' && github.event.action == 'created' && matrix.shared == 'ON' && matrix.xprs == 'ON' && matrix.sirius == 'ON' }}
        uses: actions/upload-release-asset@v1.0.2
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ${{ steps.setup.outputs.sirius-archive-path }}
          asset_name: ${{ matrix.os }}_${{ steps.setup.outputs.sirius-archive-name }}
          asset_content_type: application/zip

      - name: Checkout xpressmp813
        if: ${{ matrix.os == 'ubuntu-20.04'}}
        uses: actions/checkout@v2
        with:
          repository: rte-france/xpress-mp
          path: ${{ env.XPRS_Path }}
          ref: master
          token: ${{ secrets.ACCESS_TOKEN }}
      - name: Checkout xpressmp813Win
        if: ${{ matrix.os == 'windows-2019'}}
        uses: actions/checkout@v2
        with:
          repository: rte-france/xpress-mp-temp
          path: ${{ env.XPRS_Path }}
          ref: master
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: set linux cache variables
        id: cache
        shell: bash
        run: |
          OS=${{ matrix.os }}
          [ $OS == "ubuntu-20.04" ] && CCACHE="-DCMAKE_C_COMPILER_LAUNCHER=ccache" || CCACHE=""
          [ $OS == "ubuntu-20.04" ] && CXXCACHE="-DCMAKE_CXX_COMPILER_LAUNCHER=ccache" || CXXCACHE=""
          echo "::set-output name=CMAKE_CCACHE::$CCACHE"
          echo "::set-output name=CMAKE_CXXCACHE::$CXXCACHE"

      - name: Add xpress and sirius bin to path
        if: ${{ matrix.os == 'windows-2019'}}
        shell: bash
        run: |
          echo "${{ env.XPRS_Path }}\bin" >> $GITHUB_PATH
          echo "${{ steps.setup.outputs.sirius-install-path }}\bin" >> $GITHUB_PATH

      - name: Configure or-tools
        shell: bash
        run: |
             cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="build/install" -DBUILD_SHARED_LIBS=${{ matrix.shared }} -DBUILD_DEPS=ON -DUSE_SIRIUS=${{ matrix.sirius }} -Dsirius_solver_DIR="${{ steps.setup.outputs.sirius-install-path }}/cmake" -DUSE_XPRESS=${{ matrix.xprs }} -DXPRESS_ROOT="${{ env.XPRS_Path }}" -DBUILD_PYTHON=${{ matrix.extras }} -DBUILD_JAVA=${{ matrix.extras }} -DBUILD_DOTNET=${{ matrix.extras }} ${{ steps.cache.outputs.CMAKE_CCACHE }} ${{ steps.cache.outputs.CMAKE_CXXCACHE }}
      - name: Build Linux
        if: ${{ matrix.os == 'ubuntu-20.04'}}
        shell: bash
        run: |
          cmake --build build --config Release --target all install -j2

      - name: Build windows
        if: ${{ matrix.os == 'windows-2019'}}
        run: cmake --build build --config Release --target ALL_BUILD INSTALL -v -- /maxcpucount

      - name: Prepare ortools install
        id: or-install
        shell: bash
        run: |
          cd build/install
          find bin -type f ! \( -name 'protoc*' -o -name 'scip' -o -name 'fz' \) -delete
          cd ..
          ARCHIVE_NAME="ortools_install${{ steps.names.outputs.appendix }}.zip"
          ARCHIVE_PATH="${{ github.workspace }}/build/${ARCHIVE_NAME}"
          zip -r $ARCHIVE_PATH ./install
          echo "::set-output name=ortools_archive_name::$ARCHIVE_NAME"
          echo "::set-output name=ortools_archive_path::$ARCHIVE_PATH"


      - name: Upload artifact ortools install
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.or-install.outputs.ortools_archive_name }}
          path: ${{ steps.or-install.outputs.ortools_archive_path }}

      - name: Publish asset  file upload
        if:  github.event_name == 'release' && github.event.action == 'created'
        uses: actions/upload-release-asset@v1.0.2
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ${{ steps.or-install.outputs.ortools_archive_path }}
          asset_name: ${{ steps.or-install.outputs.ortools_archive_name }}
          asset_content_type: application/zip

      - name: set ld_library_path
        shell: bash
        run: |
          LD_PATH="${{ steps.setup.outputs.sirius-install-path }}/lib/:${{ env.XPRS_LIB_Path }}/"
          echo "LD_LIBRARY_PATH=$LD_PATH" >> $GITHUB_ENV

      - name: Build & run CMake example project
        if: ${{ matrix.os == 'ubuntu-20.04'}}
        working-directory: ./examples/cmake/linear_programming/
        run: |
          cmake -Bbuild -S. \
                -DORTOOLS_INSTALL="${{ github.workspace }}/build/install" \
                -DXPRESS_ROOT="${{ env.XPRS_Path }}" \
                -Dsirius_solver_DIR="${{ steps.setup.outputs.sirius-install-path }}/cmake"
          cmake --build build
          ./build/linear_programming
      - name: Build & run CMake example project
        if: ${{ matrix.os == 'NONOwindows-2019'}}
        working-directory: ./examples/cmake/linear_programming/
        env:
          XPRESS: "${{ github.workspace }}/xpressmp813/bin/"
        run: |
          cmake -Bbuild -S. -DORTOOLS_INSTALL="${{ github.workspace }}/build/install" -DCMAKE_BUILD_TYPE=Release -DXPRESS_ROOT="${{ github.workspace }}/xpressmp813" -Dsirius_solver_DIR="${{ github.workspace }}/sirius-solver/SiriusInstall/cmake"
          cmake --build build --config Release
          build\Release\linear_programming.exe

      - name: Run sirius_interface unittests
        if: ${{ matrix.sirius == 'ON' }}
        working-directory: ./build
        run: ctest -V -C Release -R 'cxx_unittests_sirius_interface'
      - name: Run xpress_interface unittests
        if: ${{ matrix.xprs == 'ON' }}
        working-directory: ./build
        run: ctest -V -C Release -R 'cxx_unittests_xpress_interface'
      - name: Run specific cpp tests
        working-directory: ./build
        run: ctest -V -C Release -R cxx_cpp_linear_programming
      - name: Run specific python tests
        if: ${{ matrix.xprs == 'ON' && matrix.sirius == 'ON' }}
        working-directory: ./build
        run: ctest -V -C Release -R python_python_linear_programming
      - name: Run specific java tests
        if: ${{ matrix.extras == 'ON' }}
        working-directory: ./build
        run: ctest -V -C Release -R java_java_LinearProgramming
      - name: Run specific dotnet tests
        if: ${{ matrix.extras == 'ON' }}
        working-directory: ./build
        run: ctest -V -C Release -R dotnet_dotnet_cslinearprogramming
      - name: Run other cpp tests
        working-directory: ./build
        run: ctest --output-on-failure -C Release -R cxx_cpp -E cxx_cpp_linear_programming
      - name: Run other python tests
        if: ${{ matrix.extras == 'ON' && matrix.xprs == 'ON' && matrix.sirius == 'ON' }}
        working-directory: ./build
        run: ctest --output-on-failure -C Release -R python_python -E python_python_linear_programming
      - name: Run other java tests
        if: ${{ matrix.extras == 'ON' }}
        working-directory: ./build
        run: ctest --output-on-failure -C Release -R java_java -E java_java_LinearProgramming
      - name: Run other dotnet tests
        if: ${{ matrix.extras == 'ON' }}
        working-directory: ./build
        run: ctest --output-on-failure -C Release -R dotnet_dotnet -E dotnet_dotnet_cslinearprogramming


      - name: prepare ortools wheel
        if: ${{ matrix.extras == 'ON' }}
        id: wheel
        shell: bash
        run: |
          cd ./build/python/dist
          MY_DIR="ortools_wheel${{ steps.names.outputs.appendix }}"
          mkdir ${MY_DIR}
          cp *.whl "${MY_DIR}"
          ARCHIVE_NAME="${MY_DIR}.zip"
          ARCHIVE_PATH="${{ github.workspace }}/build/${ARCHIVE_NAME}"
          zip -r "${ARCHIVE_PATH}" "${MY_DIR}"
          echo "::set-output name=archive_name::$ARCHIVE_NAME"
          echo "::set-output name=archive_path::$ARCHIVE_PATH"

      - name: prepare ortools jar
        if: ${{ matrix.extras == 'ON' }}
        id: jar
        shell: bash
        run: |
          cd ./build/java
          MY_DIR="ortools_jar${{ steps.names.outputs.appendix }}"
          mkdir ${MY_DIR}
          cp ortools-*/target/*.jar "${MY_DIR}"
          ARCHIVE_NAME="${MY_DIR}.zip"
          ARCHIVE_PATH="${{ github.workspace }}/build/${ARCHIVE_NAME}"
          zip -r "${ARCHIVE_PATH}" "${MY_DIR}"
          echo "::set-output name=archive_name::$ARCHIVE_NAME"
          echo "::set-output name=archive_path::$ARCHIVE_PATH"

      - name: prepare ortools dotnet
        if: ${{ matrix.extras == 'ON' }}
        id: dotnet
        shell: bash
        run: |
          cd ./build/dotnet/packages/
          MY_DIR="ortools_dotnet${{ steps.names.outputs.appendix }}"
          mkdir ${MY_DIR}
          cp Google.OrTools.[0-9]*.[0-9]*.[0-9]*.nupkg "${MY_DIR}"
          ARCHIVE_NAME="${MY_DIR}.zip"
          ARCHIVE_PATH="${{ github.workspace }}/build/${ARCHIVE_NAME}"
          zip -r "${ARCHIVE_PATH}" "${MY_DIR}"
          echo "::set-output name=archive_name::$ARCHIVE_NAME"
          echo "::set-output name=archive_path::$ARCHIVE_PATH"

      - name: Upload ortools wheel
        if: ${{ matrix.extras == 'ON' }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.wheel.outputs.archive_name }}
          path: ${{ steps.wheel.outputs.archive_path }}
      - name: Upload ortools jar
        if: ${{ matrix.extras == 'ON' }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.jar.outputs.archive_name }}
          path: ${{ steps.jar.outputs.archive_path }}
      - name: Upload ortools dotnet
        if: ${{ matrix.extras == 'ON' }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.dotnet.outputs.archive_name }}
          path: ${{ steps.dotnet.outputs.archive_path }}

      - name: Publish ortools wheel
        if:  ${{ github.event_name == 'release' && github.event.action == 'created' && matrix.extras == 'ON' }}
        uses: actions/upload-release-asset@v1.0.2
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ${{ steps.wheel.outputs.archive_path }}
          asset_name: ${{ steps.wheel.outputs.archive_name }}
          asset_content_type: application/zip

      - name: Publish ortools jar
        if:  ${{ github.event_name == 'release' && github.event.action == 'created' && matrix.extras == 'ON' }}
        uses: actions/upload-release-asset@v1.0.2
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ${{ steps.jar.outputs.archive_path }}
          asset_name: ${{ steps.jar.outputs.archive_name }}
          asset_content_type: application/zip

      - name: Publish ortools dotnet
        if:  ${{ github.event_name == 'release' && github.event.action == 'created' && matrix.extras == 'ON' }}
        uses: actions/upload-release-asset@v1.0.2
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ${{ steps.dotnet.outputs.archive_path }}
          asset_name: ${{ steps.dotnet.outputs.archive_name }}
          asset_content_type: application/zip
